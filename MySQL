SELECT * 
FROM parks_and_recreation.employee_demographics;

SELECT * 
FROM parks_and_recreation.employee_salary;


SELECT DISTINCT gender
FROM parks_and_recreation.employee_demographics;



SELECT gender, AVG(age), Max(age), MIN(age), COUNT(age)
FROM employee_demographics
GROUP BY gender
;



SELECT*
FROM employee_demographics
ORDER BY age DESC
limit 3
;


SELECTgender, AVG(age) AS avg_age
FROM employee_demographics
GROUP BY gender
HAVING avg_age > 40
;


SELECT *
FROM employee_demographics AS dem
INNER JOIN employee_salary AS sal
    ON dem.employee_id = sal.employee_id
INNER JOIN parks_departments AS pd
    ON sal.dept_id = pd.department_id
;


SELECT first_name, last_name
FROM employee_demographics
WHERE age > 40 AND gender = 'Male'
UNION
SELECT first_name, last_name
FROM employee_demographics
WHERE age > 40 AND gender = 'Female'
UNION
SELECT first_name, last_name
FROM employee_salary
WHERE salary > 70000
ORDER BY first_name, last_name
;


SELECT first_name, 
last_name,
age,
Case
     WHEN age <=30 THEN 'Young'
     WHEN age BETWEEN 31 and 50 THEN 'Old'
     WHEN age >= 50 THEN 'Really Old'
END AS Age_demographics
FROM employee_demographics;


Pay Increase and Bonus
<50000 = 5%
>50000 = 7%
Finance = 10% bonus

SELECT first_name, last_name, salary,
Case
     WHEN salary < 50000 THEN salary + (salary*0.05)
     WHEN salary > 50000 THEN salary + (salary*0.07)
END AS New_Salary,
CASE
     WHEN dept_id = 6 THEN salary + (salary*0.10)
END AS Bonus
FROM employee_salary:



SELECT*
FROM employee_demographics
WHERE employee_id IN
         (SELECT employee_id
                       FROM employee_salary
                       WHERE dept_id = 1)
;




SELECT gender, AVG (salary) AS avg_salary
FROM employee_demographics dem
JOIN employee_salary sal
         ON dem.employee_id = sal.employee_id
GROUP BY gender;

SELECT gender, AVG (salary) OVER(PARTITION BY gender)
FROM employee_demographics dem
JOIN employee_salary sal
         ON dem.employee_id = sal.employee_id
;

SELECT dem.first_name, dem.last_name, gender, AVG (salary) OVER(PARTITION BY gender)
FROM employee_demographics dem
INNER JOIN employee_salary sal
         ON dem.employee_id = sal.employee_id
;


SELECT dem.first_name, dem.last_name, sal.salary, dem.gender, 
SUM(sal.salary) OVER(PARTITION BY dem.gender ORDER BY dem.employee_id) AS Rolling_Total
FROM employee_demographics dem
INNER JOIN employee_salary sal
         ON dem.employee_id = sal.employee_id
;



WITH CTE_Example AS
(
SELECT gender, AVG(salary) avg_sal , MAX(salary) max_sal, MIN(salary) min_sal, COUNT(salary) count_sal
FROM employee_demographics dem
JOIN employee_salary sal
              ON dem.emloyee_id = sal.employee_id
GROUP BY gender
)
SELECT *
FROM CTE_Example
;


WITH CTE_Example AS
(
SELECT employee_id, gender, birth_date
FROM employee_demographics
WHERE birth_date > '1985-01-01'
),
CTE_Example2 AS
(
SELECT employee_id, salary
FROM employee_salary
WHERE salary > 50000
)
SELECT *
FROM CTE_Example
JOIN CTE_Example2
         ON CTE_Example.employee_id = CTE_Example2.employee_id
;



CREATE TEMPORARY TABLE salary_over_50k
SELECT*
FROM employee_salary
WHERE salary >=50000;

SELECT*
FROM salary_over_50k;




DELIMITER $$
CREATE PROCEDURE large_salaries()
BEGIN
SELECT*
FROM employee_salary
WHERE salary >=50000;
SELECT*
FROM employee_salary
WHERE salary >=10000;
END $$
DELIMITER ;

CALL large_salaries;





DELIMITER $$
CREATE TRIGGER employee_insert
AFTER INSERT ON employee_salary
FOR EACH ROW
BEGIN
INSERT INTO employee_demographics (employee_id, first_name, last_name)
VALUES (NEW.employee_id, NEW.first_name, NEW.last_name);
END $$
DELIMITER ;

INSERT INTO employee_salary (employee_id, first_name, last_name, occupation, salary, dept_id)
VALUES(13, 'Jean-Ralphio','Saperstein','Entertainment 720 CEO',1000000,NULL);

Select*
FROM employee_salary;


CREATE TABLE layoffs_staging
LIKE layoffs;

SELECT*
FROM layoffs_staging;

INSERT layoffs_staging
SELECT*
FROM layoffs;



SELECT *, 
       ROW_NUMBER() OVER (ORDER BY company) AS row_num
FROM layoffs_staging;


SELECT*,
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging;


WITH duplicate_cte AS
(
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging
)
SELECT*
FROM duplicate_cte
WHERE row_num > 1;


Go to layoffs_staging -> right click on button -> Copy to Clipboard -> Create Statement
Find an empty space "Ctrl V"
Change name to -> layoffs_staging2
Below funds_ raised millions etc -> type the following
`row_num` INT


`country` text,
`funds_raised_millions` int DEFAULT NULL,
`row_num` INT


INSERT INTO layoffs_staging2
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging;

SELECT*
FROM layoffs_staging2
WHERE row_num > 1;


DELETE
FROM layoffs_staging2
WHERE row_num > 1;



SELECT company, TRIM(company)
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET company = TRIM(company);

SELECT DISTINCT industry
FROM layoffs_staging2
ORDER BY 1;

SELECT*
FROM layoffs_staging2
WHERE industry LIKE 'Crypto%';

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';


SELECT DISTINCT location
FROM layoffs_staging2
ORDER BY location;



SELECT DISTINCT country
FROM layoffs_staging2
ORDER BY country;

SELECT DISTINCT country, TRIM(TRAILING '.' FROM country)
FROM layoffs_staging2
ORDER BY 1;

UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

Go to layoffs_staging2 -> Click on the Arrow -> Click on Columns -> Bottom left it is Defined as a text


SELECT `date`,
STR_TO_DATE(`date`,'%m/%d/%Y')
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET `date` = STR_TO_DATE(`date`,'%m/%d/%Y');

ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;


UPDATE layoffs_staging2
SET industry = NULL
WHERE industry = '';


SELECT*
FROM layoffs_staging2 t1
JOIN layoffs_staging2 t2
ON t1.company = t2.company
WHERE(t1.industry IS NULL OR t1.industry = '')
AND t2.industry IS NOT NULL;
OR
SELECT t1.company, t1.industry, t2.industry
FROM layoffs_staging2 t1
JOIN layoffs_staging2 t2
ON t1.company = t2.company
WHERE(t1.industry IS NULL OR t1.industry = '')
AND t2.industry IS NOT NULL;


UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL
AND t2.industry IS NOT NULL;


SELECT*
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

SELECT* 
FROM layoffs_staging2;

ALTER TABLE layoffs_staging2
DROP COLUMN row_num;


SELECT MAX(total_laid_off), MAX(percentage_laid_off)
FROM layoffs_staging2


SELECT*
FROM layoffs_staging2
WHERE percentage_laid_off = 1
ORDER BY funds_raised_millions DESC;


SELECT company, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY company
GROUP BY 2 DESC;







