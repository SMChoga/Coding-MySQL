1+3
2*3
print("hello world")
Comment out	#print name

	
Data types	
type(1)
type(2.3)
type(True)
type(False)
type("Hello world")


String methods	
"Hello World".upper()
"Hello World".lower()
"Hello World".title()
	
"Hello World".count('l')
"Hello World".replace('o', 'u')
	
Variables	
hat_1 = "I am"
hat_1
	
hat_2 = "big"
hat_2 
	
hat = hat_1+' '+hat_2
hat


Lists	
countries = ['United States', 'India', 'China', 'Brazil']
countries
	
countries[0]
	
In one cell	
print(countries[0])
print(countries[1])
print(countries[-1])
print(countries[-2])


Slicing	
countries [0:3]
countries [0:1]
countries [1:]
countries [:2]
	
Adding and removing elements from a list	
countries. append('Canada')
countries
countries.insert(0, 'Spain')
countries
	
countries_2 = ['U.K', 'Germany', 'Austria']
countries + countries_2
	
nested_list = [countries, countries_2]
	
del countries(0)
countries


Sorting a list	
numbers = [4, 3, 10, 7, 1, 2]
numbers.sort()
numbers
	
numbers = [4, 3, 10, 7, 1, 2]
numbers.sort(reverse=True)
numbers
	
numbers[0] = 1000
numbers.insert(0,100)


Dictionaries
my_data = {'name':'Frank', 'age':26}
my_data
my_data.keys()
my_data.values()

my_data.items()

my_data ['height'] = 1.7
my_data

my_data.update({'height':1.8})

new_dict = my_data.copy()

del my_data['age']
my_data

my_data.clear()
my_data


IF Statement
age =18

if age>=18:
          print(''You're an adult')
else:
          print(''You're a kid')


age =10

if age>=18:
          print(''You're an adult')
elif age>=13:
          print(''You're a teenager')
else:
          print(''You're a kid')


For Loop
countries = ['United States', 'India', 'China', 'Brazil']
countries
for country in countries:
    print(country)

for i, country in enumerate(countries):
    print (i)
    print(country)


my_data = {'name':'Frank', 'age':26}
for key, value in my_data.items():
         print(key)
         print(value)


Functions
def sum_values(a, b):
      x = a + b
      return x

sum_values (1,3)


countries = ['United States', 'India', 'China', 'Brazil']
len(countries)

max([10,63,99])
min([10,63,99])
range(1, 10, 2)
type(countries)

for i in range(1,10,2):
print i



Introduction to Pandas
Import pandas as pd
import numpy as np

data =np.array([[1,4], [2,5],[3,6]])

df = pd.DataFrame(data, index =['row1','row2','row3'],
               columns = ['col1','col2'])

df


How to show a dataframe
Import pandas as pd
df_exams = pd.read_csv('StudentsPerformance.csv')
df_exams

df_exams.head()
df_exams.tail()

df_exams.head(10)
df_exams.tail(10)

pd.set_option('display.max_rows', 1000)
df_exams


Selecting One Column from a Dataframe
import pandas as pd
df_exams = pd.read_csv('StudentsPerformance.csv')
df_exams.head()

df_exams['gender']

type(df_exams['gender'])
df_exams['gender'].index
df_exams['gender'].head()


Selecting Two or More Columns from a Dataframe
df_exams[['gender', 'math score']]

type(df_exams[['gender', 'math score']])
df_exams [['gender', 'writing score', 'math score' ]]


Add New Column to a Dataframe (Simple Assignment)
df_exams['language score'] = 70
df_exams


import numpy as np

language_score = np.arange(0,1000)
len(language__score)

df_exams ['language score'] = language_score

np.random.randint(1,100, size=1000)
len(np.random.randint(1,100, size=1000))

int_language_score = np.random.randint(1,100, size=1000)

min(int_language_score)
max(int_language_score)

df_exams['language score'] = int_language_score
df_exams

df_exam = df_exam.sort_values(by='language score', ascending=False)
df_exams2 = df_exams.head(100)
df_exams2



Operational in dataframes
df_exams['math score'].sum()
df_exams['math score'].count()
df_exams['math score'].std()
df_exams['math score'].max()
df_exams['math score'].min()

df_exams.describe()


df_exams ['math score'] + df_exams ['reading score'] + df_exams ['writing score']

df_exams['average'] = (df_exams ['math score'] + df_exams ['reading score'] + df_exams ['writing score'])/3
df_exams.round(2)


Value counts methd
df_exams['gender'].value_counts()

df_exams['gender'].value_counts(normalize = True)


df_exams['parental level of education'].value_counts()
df_exams['parental level of education'].value_counts(normalize = True)


Sort a Dataframe Method
df_exams.sort_values(by='math score')
df_exams.sort_values('math score', ascending=False)

df_exams.sort_values(['math score', reading score], ascending=False)

df_exams.sort_values(['math score', reading score], ascending=False, inplace =True)

df_exams.sort_values('race/ethnicity', ascending = True)
OR
df_exams.sort_values('race/ethnicity', ascending = True, header = none, names = ['Country': 'Region' ] )


Introduction to Pivot Tables in Pandas
pd.read_csv('gdp.csv')
df_gdp = pd.read_csv('gdp.csv')
df_gdp 

df_gdp.pivot(index="year", columns="country", values = "gdppc")


pd.read_csv("supermarket_sales.csv")

df_sales = pd.read_csv("supermarket_sales.csv")
df_sales

df_sales.pivot_table(index="Gender", aggfunc = "sum")

df_sales.pivot_table(index="Gender", values=["Quantity", "Total"], aggfunc = "sum")
df_sales.pivot_table(index="Gender" ,columns = "Product line", values= "Total", aggfunc = "sum")


Data Visualization with Pandas (New  Dataset +Pivot Table)
import pandas as pd
pd.read_csv('population_total.csv')
df_population_raw = pd.read_csv('population_total.csv')
df_population_raw

df_population_raw.dropna()
df_population_raw.dropna(inplace=true)

df_population_raw.pivot_table(index='year', columns = 'country', values = 'population')
df_pivot = df_population_raw.pivot_table(index='year', columns = 'country', values = 'population')

df_pivot = df_pivot[['United States', 'India', 'China', 'Indonesia', 'Brazil']]


df_pivot.plot(kind='line', xlabel='Year', ylabel = 'Population', title = 'Population (1955-2020)', figsize=(8,4))



df_pivot [df_pivot.index.isin([2020])]
df_pivot_2020 = df_pivot [df_pivot.index.isin([2020])]
df_pivot_2020

df_pivot_2020.T
df_pivot_2020=df_pivot_2020.T

df_pivot_2020.plot(kind='bar', color = 'orange', xlabel 'Year', ylabel = 'Population', title = 'Population 2020')



df_pivot [df_pivot.index.isin([1980, 1990, 2000, 2010, 2020])]
df_pivot_sample = df_pivot [df_pivot.index.isin([1980, 1990, 2000, 2010, 2020])]

df_pivot_sample.plot(kind='bar', xlabel = 'Year', ylabel = 'Population')



df_pivot [df_pivot.index.isin([2020])]
df_pivot_2020 = df_pivot [df_pivot.index.isin([2020])]
df_pivot_2020

df_pivot_2020.T
df_pivot_2020=df_pivot_2020.T

df_pivot_2020.rename(columns={2020:'2020'}, inplace = True)
df_pivot_2020.plot(kind='pie', y='2020', title = 'Population Pie')



import matplotlib.pyplot as plt
plt.savefig('my_test.png')
plt.show()

df_pivot.to_excel('pivot_table.xlsx')


